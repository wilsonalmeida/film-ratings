;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("config" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(prod)" "(reset)" "config" "(require '[integrant.repl.state :refer [config system]])" "config" "(go)" "go" "(prod)" "config" "(duct/load-hierarchy)" "config" "(-main)" "(in-ns 'film-ratings.main)" "(require 'film-ratings.main)" "(require 'prod)" "(prod)" "(-main)" "(require '[duct.logger :as log])
(require '[duct.logger.timbre :as timbre])
(require '[duct.core :as duct])
(require '[integrant.core :as ig])
(require '[clojure.java.io :as io])
(def profiles [:duct.profile/prod])
(defn get-config []
  (duct/read-config (io/resource \"film_ratings/config.edn\")))

(defn -main []
  (-> (get-config) (duct/prep-config profiles) (duct/exec-config)))
" "(require '[duct.logger :as log])
(require '[duct.logger.timbre :as timbre])
(def profiles [:duct.profile/prod])
(defn get-config []
  (duct/read-config (io/resource \"film_ratings/config.edn\")))

(defn -main []
  (-> (get-config) (duct/prep-config profiles) (duct/exec-config)))

(require '[duct.core :as duct])
(require '[integrant.core :as ig])
(require '[clojure.java.io :as io])
" "(reset)" "(-main)" "(log/info \"Hello\")" "(require '[duct.logger :as log])" "(require '[duct.logger.timbre :as timbre])" "(-main)" "(defn -main []
        (-> (get-config) (duct/prep-config profiles) (duct/exec-config)))" "(def profiles [:duct.profile/prod])" "(defn get-config []
        (duct/read-config (io/resource \"film_ratings/config.edn\")))" "(require '[duct.core :as duct])" "(require '[integrant.core :as ig])" "(require '[clojure.java.io :as io])" "(defn get-config []
        (duct/read-config (io/resource \"film_ratings/config.edn\")))" "(-main)" "-main" "(defn -main []
        (-> (get-config) (duct/prep-config profiles) (duct/exec-config)))" "(def profiles [:duct.profile/prod])" "(def profile s [:duct.profile/prod])" "(defn -main []
        (-> (get-config) (duct/prep-config profiles) (duct/exec-config)))" "(defn -main []
        (-> (get-config) (duct/prep-config) (duct/exec-config)))" "(get-config)" "(defn get-config []
        (duct/read-config (io/resource \"film_ratings/config.edn\")))" "(ig/prep #(duct/prep-config (read-config) [:duct.profile/test]))" "(defn read-config [] (duct/read-config (io/resource \"film_ratings/config.edn\")))" "(duct/read-config (io/resource \"film_ratings/config.edn\"))" "(require '[clojure.java.io :as io])" "(require [clojure.java.io :as io])" "(reuiqre [clojure.java.io :as io])" "(require '[integrant.core :as ig])" "(require '[duct.core :as duct]
       )" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(shadow.cljs.repl)" "(go)" "(dev)" " (require '[shadow.cljs.devtools.api :as shadow]) " "(in-ns 'user)" "(watch :app)" "(shadow/watch :app)" "(in-ns 'shadow)" " (require '[shadow.cljs.devtools.api :as shadow]) " " (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app))" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "config" "(figwheel.client/start {:websocket-url \"ws://localhost:3449/figwheel-ws\"})
" "(figwheel.connect)" "(figwheel-sidecar.auto-builder)" "(reset)" "(go)" "(reset)" "config" "(reset)" "config" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "site-defaults" "(require '[ring.middleware.defaults :refer :all])" "config" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(dev)" "(go)" "(dev)" "(loop-dogs pets)" "(defn loop-dogs [pets]
(loop [pet pets 
       dogs []]
  (if (first pet)
    (recur (rest pet)
           (if (= :dog (:type (first pet)))
             (conj dogs (first pet))
             dogs))
    dogs)))" "(loop-dogs pets)" "(def pets [
                     {:name \"Fluffykins\" :type :cat}
                     {:name \"Sparky\" :type :dog}
                     {:name \"Tibby\" :type :dog}
                     {:name \"Al\" :type :fish}
                     {:name \"Victor\" :type :bear}
                 ])" "(defn loop-dogs [pets]
            (loop [pets pets
                              dogs []]
                      (if (first pets)
                                    (recur (rest pets)
                                                              (if (= :dog (:type (first pets)))
                                                                                       (conj dogs (first pets))
                                                                                                              dogs))
                                                dogs)))" "(add-five 100)" "(def add-five (adder 5))" "(defn adder [x]
        (print \"X: \" x)
          (fn [a] (+ x a)))" "(defn adder [x]
          (fn [a] (+ x a)))" "(map #(macro-hello %) [\"Brian\" \"Not Brian\"])" "(map macro-hello [\"Brian\" \"Not Brian\"])" "(map fn-hello [\"Brian\" \"Not Brian\"])" "(macro-hello \"Wilson\")" "(defmacro macro-hello [x]
        `(str \"Hello \" ~x))" "(macro-hello \"Wilson\")" "(defmacro macro-hello [x]
        `(str \"Hello\" ~x))" "(macro-hello \"Wilson\")" "(defmacro macro-hello [x]
        `(println \"Hello\" ~x))" "(fn-hello \"Wilson\")" "(defn fn-hello [x]
        (str \"Hello, \" x \"!\"))" "(seq 
       (concat (list 'map) (list 'println) (list [45])))" "(concat (list 'map) (list 'println) (list [45]))" "(list (concat (list 'map) (list 'println) (list [45])))" "(list (concat (list map) (list println) (list [45])))" "(list (concat (list map) (list println) (list [45))))" "(list (concat (clojure.core/map) (clojure.core/println) ([45])))" "(concat (clojure.core/map) (clojure.core/println) ([45]))" "(concat (clojure.core/map)(clojure.core/println)([45]))" "(clojure.core/list 'clojure.core/map) (clojure.core/list 'clojure.core/println) (clojure.core/list [foo])" "(clojure.core/concat
  (clojure.core/list 'clojure.core/map)
  (clojure.core/list 'clojure.core/println)
  (clojure.core/list [foo]))" "(def foo 45)" "(clojure.core/concat
  (clojure.core/list 'clojure.core/map)
  (clojure.core/list 'clojure.core/println)
  (clojure.core/list [foo]))" "'`(map println ~[foo])" "(macroexpand-1 '(foo (doseq [x (range 5)]
                             (println x))
                           :done))" "(defmacro foo
        [& body]
        `(do-something ~@body))" "(macroexpand-1 '(foo (doseq [x (range 5)]
                             (println x))
                           :done))" "(defmacro foo
        [& body]
        `(do-something ~body))" "(macroexpand-1 '(foo (doseq [x (range 5)]
                             (println x))
                           :done))" "(defmacro foo
        [& body]
        `(do-something ~@body))" "'((def x 123) (def y 456))" "(concat (list 'do) (list \"Hello\"))" "(concat (list 'do) \"Hello\")" "(let [defs '((def x 123)
                   (def y 456))]
        (concat (list 'do) defs))" "(def y 456)" "(let [defs '((def x 123))])" "(map char \"Hell\")" "(apply char \"Hell\")" "(char  (seq [\"Hello\" \"Jack\"]))" "(seq [\"Hello\" \"Jack\"])" "(seq [\"Hello\"])" "(concat [\"Hello\" \"Jack\"] [\"Hello\" \"Rose\"])" "(concat \"hello\" \"Jack\")" "`(println ~(str (str foo \"hello\") \"DEf\"))" "`(println ~(concat (str foo \"hello\") \"DEf\"))" "(str foo)" "`(println ~(keyword (str foo)))" "`(map println (~@foo))" "`(map println [~@foo])" "`(map println ~@[foo])" "`(map println ~@foo)" "`(map println ~foo)" "`(map println ~[foo])" "`(map println [~foo])" "(def foo [1 2 84 99])" "`(map println [~foo])" "(loop [col (range 1 5)]
        (when-let [[a & b] (seq col)]
          (print (format \"A: %s, B: %s\" a b))
          (recur b)))" "(loop [col (range 1 100)]
        (when-let [[a & b] (seq col)]
          (print (format \"A: %s, B: %s\" a b))
          (recur b)))" "(when-let [[a & b] (seq col)]
        (print b)) " "(when-let [[a & b] (seq col)]
        (print a)) " "(seq col)" "(def col [1 2 3 4 5 6])" "(macroexpand '(foreach [x [1 2 3]]
                               (println x)))" "(defmacro foreach [[sym coll] & body]
        `(loop [coll# ~coll]
           (when-let [[~sym & xs#] (seq coll#)]
             ~@body
             (recur xs#))))" "(macroexpand '(foreach [x [1 2 3]]
                               (println x)))" "(macroexpand-1 '(foreach [x [1 2 3]]
                               (println x)))" "(defmacro foreach [[sym coll] & body]
        `(loop [coll# ~coll]
           (when-let [[~sym & xs#] (seq coll#)]
             ~@body
             (recur xs#))))" "~@body" "(when-let [[~sym & xs#] (seq coll#)])" "`(loop [coll# ~coll])" "(defmacro foreach [[sym coll] & body])" "(reset)" "(resp/header {:body  \"hello\"}  \"anti-forgery-token\" \"ajsddjfldsafjd;s\")" "(resp/header \"hello\"  \"anti-forgery-token\" \"ajsddjfldsafjd;s\")" "(resp/header \"anti-forgery-token\" \"ajsddjfldsafjd;s\")" "(reset)" "(prin a)" "(reset)" "(prin a)" "(defn prin [{[_ t] :ataraxy/result}]
       (pprint t))" "(prin a)" "(defn prin [{[_ t] :ataraxy/result}]
       (pprint a))" "(defn [{[_ t] :ataraxy/result}]
       (pprint a))" "(def a {:ataraxy/result [:film-ratings.handler.index/index]})" " (:ataraxy/result {:ataraxy/result [:film-ratings.handler.index/index]})" "(first (:ataraxy/result {:ataraxy/result [:film-ratings.handler.index/index]}))" "(first (:ataraxy.core/result {:ataraxy/result [:film-ratings.handler.index/index]}))" "(resp/header (resp/response \"Hello\") \"anti-forgery-key\" \"sljdflasflasdjasdkfjas\")" "(resp/header \"anti-forgery-key\" \"sljdflasflasdjasdkfjas\")" "(-> (resp/response \"hello\") (resp/content-type \"text/html; charset=UTF-8\"))" "(-> (resp \"hello\") (resp/content-type \"text/html; charset=UTF-8\"))" "(reset)" "(resp/response \"Hello\")" "(require '[ring.util.response :as resp])" "(response/ok  \"Hello\")" "(::response/ok  \"Hello\")" "[::response/ok  \"Hello\"]" "[::response/ok ]" "(response/ok \"Hello\")" "(require '[ataraxy.response :as response])" "(at/ok \"Hello\")" "(require '[duct.module.ataraxy :as at])" "(reset)" "config" "(go)" "(dev)" "(reset)" "(codec/percent-decode \"Test%20film\")" "(codec/percent-decode \"Test%5C%20film\")" "(require '[ring.util.codec :as codec])" "(reset)" "(get-in config [:duct.middleware.web/defaults])" "(reset)" "(get-in config [:duct.middleware.web/defaults])" "(reset)" "(get-in config [:duct.middleware.web/defaults])" "(reset)" "(get-in config [:duct.middleware.web/defaults])" "(get-in config [:duct.middleware.web/defaults :security ])" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "config" "(config)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(go)" "(dev)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(reset)" "(get-in config [:duct.middleware.web/defaults :security :anti-forgery])" "(get-in config [:duct.middleware.web/defaults :security])" "(get-in config [:duct.middleware.web/defaults])" "(:duct-middleware.web/defaults  config)" "(:duct-middleware.web/site  config)" "(:duct-middleware.web  config)" "(:duct-middleware.web/defaults config)" "config" "(reset)" "config" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "config" "(go)" "config" "(dev)" "config" "(reset)" "(with-redefs config  (update-in config [:params :security] assoc :anti-forgery  false))" "(type config)" "(def config  (update-in config [:params :security] assoc :anti-forgery  false))" "(update-in config [:params :security] assoc :anti-forgery  false)" "(update-in config [:params :security ] assoc {:anti-forgery  false})" "(update-in config [:params :security :anti-forgery] apply false)" "(update-in config [:params :security :anti-forgery] false)" "(update-in config [params security anti-forgery] false)" "config" "(reset)" "config" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(reset)" "(in-ns 'dev)" "(dev)" "(reset)" "(ataraxy.response/->response {\"name\" \"wilson\", \"age\" \"25\"})" "(ataraxy.response/->response {\"name\" \"wilson\"})" "(ataraxy.response/->response \"Hello\")" "(ataraxy.response/->response ::response/ok)" "ataraxy.response/->response " "(ataraxy.response/ok)" "(:ataraxy.response/ok)" "::response/ok" "(reduce-kv (fn [m k v] (assoc m (keyword k) v)) {} user)" "user" "(def user (dissoc
                                      {\"__anti-forgery-token\" \"HELLO\" \"age\" 25 \"name\" \"Wilson\"}
                                      \"__anti-forgery-token\"))" "(reduce-kv (fn [m k v] (assoc m (keyword k) v)) {} user)" "user" "(def user (dissoc
                                      {\"__anti-forgery-token\" \"HELLO\" :age 25 :name \"Wilson\"}
                                      \"__anti-forgery-token\"))" "(dissoc
                            {\"__anti-forgery-token\" \"HELLO\" :age 25 :name \"Wilson\"}
                            \"__anti-forgery-token\")" "(dissoc
                            {\"__anti-forgery-token\" \"HELLO\" :name \"Wilson\"}
                            \"__anti-forgery-token\")" "(dissoc {\"__ anti-forgery-token\" \"HELLO\" :name \"Wilson\"} \"__anti-forgery-token\")" "(dissoc {:anti-forgery-token \"HELLO\" :name \"Wilson\"} \"__anti-forgery-token\")" "(doc dissoc)" "(doc reduce-kv)" "(require '[clojure.repl :refer [doc]])" "::response/ok" "(go)" "(dev)" "(re-find #\"href=\\\"/list-film\\\"\" (second response))" "(re-find #\"href=\\\"/add-film\\\"\" (second response))" "(re-find #\"href\" (second response))" "(re-find #\"href\") (second response)" "(second response)" "(first response)" "response" "(def response (handler (mock/request :get \"/\")))" "(def response (handler (mock/request :get) \"/\"))" "(def response (handler (mock/request) :get \"/\"))" "(def handler (ig/init-key :film-ratings.handler/index {}))" "response" "(def response (mock/request :get \"/\"))" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(reset)" "(go)" "(dev)" "(go)" "(dev)" "(quit)" "(exit)" "(go)" "(dev)" "(dev)")